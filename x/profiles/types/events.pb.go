// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/profiles/v2/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventSaveProfile is an event emitted when a profile is saved
type EventSaveProfile struct {
	DTag string `protobuf:"bytes,1,opt,name=dtag,proto3" json:"dtag,omitempty" yaml:"dtag"`
	// CreationTime represents the time in which the profile has been created
	CreationDate time.Time `protobuf:"bytes,2,opt,name=creation_date,json=creationDate,proto3,stdtime" json:"creation_date" yaml:"creation_date"`
	// Owner of the profile
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty" yaml:"user"`
}

func (m *EventSaveProfile) Reset()         { *m = EventSaveProfile{} }
func (m *EventSaveProfile) String() string { return proto.CompactTextString(m) }
func (*EventSaveProfile) ProtoMessage()    {}
func (*EventSaveProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_76e39136e2c36ef3, []int{0}
}
func (m *EventSaveProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSaveProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSaveProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSaveProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSaveProfile.Merge(m, src)
}
func (m *EventSaveProfile) XXX_Size() int {
	return m.Size()
}
func (m *EventSaveProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSaveProfile.DiscardUnknown(m)
}

var xxx_messageInfo_EventSaveProfile proto.InternalMessageInfo

func (m *EventSaveProfile) GetDTag() string {
	if m != nil {
		return m.DTag
	}
	return ""
}

func (m *EventSaveProfile) GetCreationDate() time.Time {
	if m != nil {
		return m.CreationDate
	}
	return time.Time{}
}

func (m *EventSaveProfile) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

// EventDeleteProfile is an event emitted when a profile is deleted
type EventDeleteProfile struct {
	// Owner of the deleted profile
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" yaml:"user"`
}

func (m *EventDeleteProfile) Reset()         { *m = EventDeleteProfile{} }
func (m *EventDeleteProfile) String() string { return proto.CompactTextString(m) }
func (*EventDeleteProfile) ProtoMessage()    {}
func (*EventDeleteProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_76e39136e2c36ef3, []int{1}
}
func (m *EventDeleteProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeleteProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeleteProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeleteProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeleteProfile.Merge(m, src)
}
func (m *EventDeleteProfile) XXX_Size() int {
	return m.Size()
}
func (m *EventDeleteProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeleteProfile.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeleteProfile proto.InternalMessageInfo

func (m *EventDeleteProfile) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

// EventRequestDTagTransfer is an event emitted when a DTag transfer is
// requested
type EventRequestDTagTransfer struct {
	// DTag to be traded
	DTagToTrade string `protobuf:"bytes,1,opt,name=dtag_to_trade,json=dtagToTrade,proto3" json:"dtag_to_trade,omitempty" yaml:"dtag_to_trade"`
	// Sender of the request
	RequestSender string `protobuf:"bytes,2,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty" yaml:"request_sender"`
	// Receiver of the request
	RequestReceiver string `protobuf:"bytes,3,opt,name=request_receiver,json=requestReceiver,proto3" json:"request_receiver,omitempty" yaml:"request_receiver"`
}

func (m *EventRequestDTagTransfer) Reset()         { *m = EventRequestDTagTransfer{} }
func (m *EventRequestDTagTransfer) String() string { return proto.CompactTextString(m) }
func (*EventRequestDTagTransfer) ProtoMessage()    {}
func (*EventRequestDTagTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_76e39136e2c36ef3, []int{2}
}
func (m *EventRequestDTagTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRequestDTagTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRequestDTagTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRequestDTagTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRequestDTagTransfer.Merge(m, src)
}
func (m *EventRequestDTagTransfer) XXX_Size() int {
	return m.Size()
}
func (m *EventRequestDTagTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRequestDTagTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_EventRequestDTagTransfer proto.InternalMessageInfo

func (m *EventRequestDTagTransfer) GetDTagToTrade() string {
	if m != nil {
		return m.DTagToTrade
	}
	return ""
}

func (m *EventRequestDTagTransfer) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *EventRequestDTagTransfer) GetRequestReceiver() string {
	if m != nil {
		return m.RequestReceiver
	}
	return ""
}

// EventCancelDTagTransferRequest is an event emitted when a DTag transfer
// request is canceled
type EventCancelDTagTransferRequest struct {
	// Sender of the request
	RequestSender string `protobuf:"bytes,1,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty" yaml:"request_sender"`
	// Receiver of the request
	RequestReceiver string `protobuf:"bytes,2,opt,name=request_receiver,json=requestReceiver,proto3" json:"request_receiver,omitempty" yaml:"request_receiver"`
}

func (m *EventCancelDTagTransferRequest) Reset()         { *m = EventCancelDTagTransferRequest{} }
func (m *EventCancelDTagTransferRequest) String() string { return proto.CompactTextString(m) }
func (*EventCancelDTagTransferRequest) ProtoMessage()    {}
func (*EventCancelDTagTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76e39136e2c36ef3, []int{3}
}
func (m *EventCancelDTagTransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCancelDTagTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCancelDTagTransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCancelDTagTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCancelDTagTransferRequest.Merge(m, src)
}
func (m *EventCancelDTagTransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventCancelDTagTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCancelDTagTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventCancelDTagTransferRequest proto.InternalMessageInfo

func (m *EventCancelDTagTransferRequest) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *EventCancelDTagTransferRequest) GetRequestReceiver() string {
	if m != nil {
		return m.RequestReceiver
	}
	return ""
}

// EventAcceptDTagTransferRequest is an event emitted when a DTag transfer
// request is accepted
type EventAcceptDTagTransferRequest struct {
	// DTag to be traded
	DTagToTrade string `protobuf:"bytes,1,opt,name=dtag_to_trade,json=dtagToTrade,proto3" json:"dtag_to_trade,omitempty" yaml:"dtag_to_trade"`
	// New DTag the request receiver will have after accepting the request
	NewDTag string `protobuf:"bytes,2,opt,name=new_dtag,json=newDtag,proto3" json:"new_dtag,omitempty" yaml:"new_dtag"`
	// Request sender
	RequestSender string `protobuf:"bytes,3,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty" yaml:"request_sender"`
	// Request receiver
	RequestReceiver string `protobuf:"bytes,4,opt,name=request_receiver,json=requestReceiver,proto3" json:"request_receiver,omitempty" yaml:"request_receiver"`
}

func (m *EventAcceptDTagTransferRequest) Reset()         { *m = EventAcceptDTagTransferRequest{} }
func (m *EventAcceptDTagTransferRequest) String() string { return proto.CompactTextString(m) }
func (*EventAcceptDTagTransferRequest) ProtoMessage()    {}
func (*EventAcceptDTagTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76e39136e2c36ef3, []int{4}
}
func (m *EventAcceptDTagTransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAcceptDTagTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAcceptDTagTransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAcceptDTagTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAcceptDTagTransferRequest.Merge(m, src)
}
func (m *EventAcceptDTagTransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventAcceptDTagTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAcceptDTagTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventAcceptDTagTransferRequest proto.InternalMessageInfo

func (m *EventAcceptDTagTransferRequest) GetDTagToTrade() string {
	if m != nil {
		return m.DTagToTrade
	}
	return ""
}

func (m *EventAcceptDTagTransferRequest) GetNewDTag() string {
	if m != nil {
		return m.NewDTag
	}
	return ""
}

func (m *EventAcceptDTagTransferRequest) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *EventAcceptDTagTransferRequest) GetRequestReceiver() string {
	if m != nil {
		return m.RequestReceiver
	}
	return ""
}

// EventRefuseDTagTransferRequest is an event emitted when a DTag transfer
// request is refused
type EventRefuseDTagTransferRequest struct {
	// Sender of the request
	RequestSender string `protobuf:"bytes,1,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty" yaml:"request_sender"`
	// Receiver of the request
	RequestReceiver string `protobuf:"bytes,2,opt,name=request_receiver,json=requestReceiver,proto3" json:"request_receiver,omitempty" yaml:"request_receiver"`
}

func (m *EventRefuseDTagTransferRequest) Reset()         { *m = EventRefuseDTagTransferRequest{} }
func (m *EventRefuseDTagTransferRequest) String() string { return proto.CompactTextString(m) }
func (*EventRefuseDTagTransferRequest) ProtoMessage()    {}
func (*EventRefuseDTagTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76e39136e2c36ef3, []int{5}
}
func (m *EventRefuseDTagTransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRefuseDTagTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRefuseDTagTransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRefuseDTagTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRefuseDTagTransferRequest.Merge(m, src)
}
func (m *EventRefuseDTagTransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventRefuseDTagTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRefuseDTagTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventRefuseDTagTransferRequest proto.InternalMessageInfo

func (m *EventRefuseDTagTransferRequest) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *EventRefuseDTagTransferRequest) GetRequestReceiver() string {
	if m != nil {
		return m.RequestReceiver
	}
	return ""
}

// EventLinkChainAccount is an event emitted when a chain link is created
type EventLinkChainAccount struct {
	// Name of the external chain
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty" yaml:"chain_name"`
	// Address on the external chain
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty" yaml:"target"`
	// CreationTime represents the time in which the link has been created
	CreationDate time.Time `protobuf:"bytes,3,opt,name=creation_date,json=creationDate,proto3,stdtime" json:"creation_date" yaml:"creation_date"`
	// Owner of the link
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty" yaml:"user"`
}

func (m *EventLinkChainAccount) Reset()         { *m = EventLinkChainAccount{} }
func (m *EventLinkChainAccount) String() string { return proto.CompactTextString(m) }
func (*EventLinkChainAccount) ProtoMessage()    {}
func (*EventLinkChainAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_76e39136e2c36ef3, []int{6}
}
func (m *EventLinkChainAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLinkChainAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLinkChainAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLinkChainAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLinkChainAccount.Merge(m, src)
}
func (m *EventLinkChainAccount) XXX_Size() int {
	return m.Size()
}
func (m *EventLinkChainAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLinkChainAccount.DiscardUnknown(m)
}

var xxx_messageInfo_EventLinkChainAccount proto.InternalMessageInfo

func (m *EventLinkChainAccount) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *EventLinkChainAccount) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *EventLinkChainAccount) GetCreationDate() time.Time {
	if m != nil {
		return m.CreationDate
	}
	return time.Time{}
}

func (m *EventLinkChainAccount) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

// EventUnlinkChainAccount is an event emitted when a chain link is deleted
type EventUnlinkChainAccount struct {
	// Name of the external chain
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty" yaml:"chain_name"`
	// Address on the external chain
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty" yaml:"target"`
	// Owner of the link
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty" yaml:"user"`
}

func (m *EventUnlinkChainAccount) Reset()         { *m = EventUnlinkChainAccount{} }
func (m *EventUnlinkChainAccount) String() string { return proto.CompactTextString(m) }
func (*EventUnlinkChainAccount) ProtoMessage()    {}
func (*EventUnlinkChainAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_76e39136e2c36ef3, []int{7}
}
func (m *EventUnlinkChainAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUnlinkChainAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUnlinkChainAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUnlinkChainAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUnlinkChainAccount.Merge(m, src)
}
func (m *EventUnlinkChainAccount) XXX_Size() int {
	return m.Size()
}
func (m *EventUnlinkChainAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUnlinkChainAccount.DiscardUnknown(m)
}

var xxx_messageInfo_EventUnlinkChainAccount proto.InternalMessageInfo

func (m *EventUnlinkChainAccount) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *EventUnlinkChainAccount) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *EventUnlinkChainAccount) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

// EventLinkApplication is an event emitted when an application link is
// created
type EventLinkApplication struct {
	// Name of the linked application
	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty" yaml:"application"`
	// Username on the application that has been linked
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty" yaml:"username"`
	// CreationTime represents the time in which the link has been created
	CreationDate time.Time `protobuf:"bytes,3,opt,name=creation_date,json=creationDate,proto3,stdtime" json:"creation_date" yaml:"creation_date"`
	// Owner of the link
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty" yaml:"user"`
}

func (m *EventLinkApplication) Reset()         { *m = EventLinkApplication{} }
func (m *EventLinkApplication) String() string { return proto.CompactTextString(m) }
func (*EventLinkApplication) ProtoMessage()    {}
func (*EventLinkApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_76e39136e2c36ef3, []int{8}
}
func (m *EventLinkApplication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLinkApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLinkApplication.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLinkApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLinkApplication.Merge(m, src)
}
func (m *EventLinkApplication) XXX_Size() int {
	return m.Size()
}
func (m *EventLinkApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLinkApplication.DiscardUnknown(m)
}

var xxx_messageInfo_EventLinkApplication proto.InternalMessageInfo

func (m *EventLinkApplication) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *EventLinkApplication) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *EventLinkApplication) GetCreationDate() time.Time {
	if m != nil {
		return m.CreationDate
	}
	return time.Time{}
}

func (m *EventLinkApplication) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

// EventSaveApplicationLink is an event emitted when an application link is
// saved
type EventSaveApplicationLink struct {
	// Name of the linked application
	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty" yaml:"application"`
	// Username on the application that has been linked
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty" yaml:"username"`
	// Owner of the link
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty" yaml:"user"`
}

func (m *EventSaveApplicationLink) Reset()         { *m = EventSaveApplicationLink{} }
func (m *EventSaveApplicationLink) String() string { return proto.CompactTextString(m) }
func (*EventSaveApplicationLink) ProtoMessage()    {}
func (*EventSaveApplicationLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_76e39136e2c36ef3, []int{9}
}
func (m *EventSaveApplicationLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSaveApplicationLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSaveApplicationLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSaveApplicationLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSaveApplicationLink.Merge(m, src)
}
func (m *EventSaveApplicationLink) XXX_Size() int {
	return m.Size()
}
func (m *EventSaveApplicationLink) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSaveApplicationLink.DiscardUnknown(m)
}

var xxx_messageInfo_EventSaveApplicationLink proto.InternalMessageInfo

func (m *EventSaveApplicationLink) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *EventSaveApplicationLink) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *EventSaveApplicationLink) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

// EventUnlinkApplication is an event emitted when an application link is
// deleted
type EventUnlinkApplication struct {
	// Name of the linked application
	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty" yaml:"application"`
	// Username on the application that has been linked
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty" yaml:"username"`
	// Owner of the link
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty" yaml:"user"`
}

func (m *EventUnlinkApplication) Reset()         { *m = EventUnlinkApplication{} }
func (m *EventUnlinkApplication) String() string { return proto.CompactTextString(m) }
func (*EventUnlinkApplication) ProtoMessage()    {}
func (*EventUnlinkApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_76e39136e2c36ef3, []int{10}
}
func (m *EventUnlinkApplication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUnlinkApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUnlinkApplication.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUnlinkApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUnlinkApplication.Merge(m, src)
}
func (m *EventUnlinkApplication) XXX_Size() int {
	return m.Size()
}
func (m *EventUnlinkApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUnlinkApplication.DiscardUnknown(m)
}

var xxx_messageInfo_EventUnlinkApplication proto.InternalMessageInfo

func (m *EventUnlinkApplication) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *EventUnlinkApplication) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *EventUnlinkApplication) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func init() {
	proto.RegisterType((*EventSaveProfile)(nil), "desmos.profiles.v2.EventSaveProfile")
	proto.RegisterType((*EventDeleteProfile)(nil), "desmos.profiles.v2.EventDeleteProfile")
	proto.RegisterType((*EventRequestDTagTransfer)(nil), "desmos.profiles.v2.EventRequestDTagTransfer")
	proto.RegisterType((*EventCancelDTagTransferRequest)(nil), "desmos.profiles.v2.EventCancelDTagTransferRequest")
	proto.RegisterType((*EventAcceptDTagTransferRequest)(nil), "desmos.profiles.v2.EventAcceptDTagTransferRequest")
	proto.RegisterType((*EventRefuseDTagTransferRequest)(nil), "desmos.profiles.v2.EventRefuseDTagTransferRequest")
	proto.RegisterType((*EventLinkChainAccount)(nil), "desmos.profiles.v2.EventLinkChainAccount")
	proto.RegisterType((*EventUnlinkChainAccount)(nil), "desmos.profiles.v2.EventUnlinkChainAccount")
	proto.RegisterType((*EventLinkApplication)(nil), "desmos.profiles.v2.EventLinkApplication")
	proto.RegisterType((*EventSaveApplicationLink)(nil), "desmos.profiles.v2.EventSaveApplicationLink")
	proto.RegisterType((*EventUnlinkApplication)(nil), "desmos.profiles.v2.EventUnlinkApplication")
}

func init() { proto.RegisterFile("desmos/profiles/v2/events.proto", fileDescriptor_76e39136e2c36ef3) }

var fileDescriptor_76e39136e2c36ef3 = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xce, 0xa4, 0x51, 0x7f, 0x26, 0x37, 0xb7, 0xed, 0xdc, 0xfe, 0xe4, 0xf6, 0x4a, 0x9e, 0x6a,
	0xee, 0x82, 0x22, 0x44, 0x2c, 0x5a, 0x16, 0x94, 0x15, 0x4d, 0x03, 0x9b, 0xa2, 0x0a, 0x4d, 0xc3,
	0x86, 0x4d, 0x34, 0x71, 0x4e, 0x5c, 0x0b, 0xc7, 0x0e, 0xf6, 0x24, 0xa5, 0x3b, 0xb6, 0xec, 0xfa,
	0x06, 0x6c, 0x51, 0x97, 0xbc, 0x04, 0x5d, 0x76, 0xc9, 0xca, 0xa0, 0xf4, 0x09, 0xc8, 0x13, 0x20,
	0xcf, 0xd8, 0xf9, 0x51, 0xab, 0xaa, 0x82, 0x52, 0xba, 0xf3, 0x39, 0xe7, 0x3b, 0x67, 0xbe, 0xf3,
	0x1d, 0xcf, 0xb1, 0x31, 0x6d, 0x40, 0xd8, 0xf2, 0x43, 0xb3, 0x1d, 0xf8, 0x4d, 0xc7, 0x85, 0xd0,
	0xec, 0xae, 0x9b, 0xd0, 0x05, 0x4f, 0x86, 0xa5, 0x76, 0xe0, 0x4b, 0x9f, 0x10, 0x0d, 0x28, 0xa5,
	0x80, 0x52, 0x77, 0x7d, 0x65, 0xc1, 0xf6, 0x6d, 0x5f, 0x85, 0xcd, 0xf8, 0x49, 0x23, 0x57, 0xa8,
	0xed, 0xfb, 0xb6, 0x0b, 0xa6, 0xb2, 0xea, 0x9d, 0xa6, 0x29, 0x9d, 0x16, 0x84, 0x52, 0xb4, 0xda,
	0x1a, 0xc0, 0x3e, 0x23, 0x3c, 0xf7, 0x34, 0xae, 0xbd, 0x27, 0xba, 0xf0, 0x42, 0xd7, 0x23, 0xf7,
	0x70, 0xae, 0x21, 0x85, 0x5d, 0x44, 0xab, 0x68, 0x6d, 0xa6, 0xbc, 0xdc, 0x8b, 0x68, 0xae, 0x52,
	0x15, 0x76, 0x3f, 0xa2, 0xf9, 0x43, 0xd1, 0x72, 0x1f, 0xb3, 0x38, 0xca, 0xb8, 0x02, 0x11, 0x81,
	0x0b, 0x56, 0x00, 0x42, 0x3a, 0xbe, 0x57, 0x6b, 0x08, 0x09, 0xc5, 0xec, 0x2a, 0x5a, 0xcb, 0xaf,
	0xaf, 0x94, 0xf4, 0xd1, 0xa5, 0xf4, 0xe8, 0x52, 0x35, 0x3d, 0xba, 0xbc, 0x7a, 0x12, 0xd1, 0x4c,
	0x3f, 0xa2, 0x0b, 0xba, 0xda, 0x58, 0x3a, 0x3b, 0xfa, 0x4a, 0x11, 0xff, 0x2b, 0xf5, 0x55, 0x84,
	0x04, 0xf2, 0x3f, 0xce, 0x75, 0x42, 0x08, 0x8a, 0x13, 0x8a, 0xcf, 0xec, 0x90, 0x47, 0xec, 0x65,
	0x5c, 0x05, 0xd9, 0x26, 0x26, 0xaa, 0x91, 0x0a, 0xb8, 0x20, 0x07, 0xad, 0xa4, 0xa9, 0xe8, 0xb2,
	0xd4, 0xef, 0x08, 0x17, 0x55, 0x2e, 0x87, 0x37, 0x1d, 0x08, 0x65, 0xdc, 0x6c, 0x35, 0x10, 0x5e,
	0xd8, 0x84, 0x80, 0xec, 0xe0, 0x42, 0xdc, 0x67, 0x4d, 0xfa, 0x35, 0x19, 0x88, 0x06, 0x24, 0xa5,
	0xee, 0xf4, 0x22, 0x9a, 0x57, 0x40, 0xbf, 0x1a, 0xbb, 0x87, 0xed, 0x8c, 0xa1, 0x19, 0xcf, 0xc7,
	0x76, 0x02, 0x22, 0x4f, 0xf0, 0xdf, 0x81, 0x3e, 0xa3, 0x16, 0x82, 0xd7, 0x80, 0x40, 0xa9, 0x35,
	0x53, 0xfe, 0xb7, 0x1f, 0xd1, 0x45, 0x9d, 0x3e, 0x1e, 0x67, 0xbc, 0x90, 0x38, 0xf6, 0x94, 0x4d,
	0x9e, 0xe1, 0xb9, 0x14, 0x11, 0x80, 0x05, 0x4e, 0x77, 0xa0, 0xcb, 0x7f, 0xfd, 0x88, 0x2e, 0x8f,
	0xd7, 0x48, 0x11, 0x8c, 0xcf, 0x26, 0x2e, 0x9e, 0x7a, 0x8e, 0x11, 0x36, 0x54, 0xcf, 0xdb, 0xc2,
	0xb3, 0xc0, 0x1d, 0x6d, 0x39, 0x51, 0xe1, 0x02, 0xb2, 0xe8, 0x1a, 0xc8, 0x66, 0x7f, 0x82, 0xec,
	0xa7, 0x6c, 0x42, 0x76, 0xcb, 0xb2, 0xa0, 0x2d, 0x2f, 0x22, 0x7b, 0xad, 0x63, 0xda, 0xc4, 0xd3,
	0x1e, 0x1c, 0xd4, 0xd4, 0x25, 0xd0, 0x7c, 0x8d, 0x5e, 0x44, 0xa7, 0x76, 0xe1, 0x20, 0xb9, 0x07,
	0xb3, 0xba, 0x46, 0x0a, 0x62, 0x7c, 0xca, 0x83, 0x83, 0x4a, 0x7c, 0x1d, 0xce, 0x8b, 0x36, 0x71,
	0x0d, 0xa2, 0xe5, 0x7e, 0x65, 0xc2, 0x1c, 0x9a, 0x9d, 0x10, 0x6e, 0xf7, 0x84, 0xdf, 0x65, 0xf1,
	0xa2, 0x22, 0xfb, 0xdc, 0xf1, 0x5e, 0x6f, 0xef, 0x0b, 0xc7, 0xdb, 0xb2, 0x2c, 0xbf, 0xe3, 0x49,
	0xf2, 0x10, 0x63, 0x2b, 0xb6, 0x6b, 0x9e, 0x68, 0xa5, 0x53, 0x5d, 0xec, 0x47, 0x74, 0x3e, 0x59,
	0x1e, 0x83, 0x18, 0xe3, 0x33, 0xca, 0xd8, 0x15, 0x2d, 0x20, 0x77, 0xf1, 0xa4, 0x14, 0x81, 0x0d,
	0x32, 0x61, 0x33, 0xdf, 0x8f, 0x68, 0x41, 0x67, 0x68, 0x3f, 0xe3, 0x09, 0xe0, 0xfc, 0x02, 0x9b,
	0xf8, 0x6d, 0x0b, 0x2c, 0x77, 0xd9, 0x16, 0xfa, 0x80, 0xf0, 0xb2, 0x92, 0xe0, 0xa5, 0xe7, 0xde,
	0xb8, 0x08, 0x57, 0x5a, 0xb1, 0xef, 0xb3, 0x78, 0x61, 0x30, 0xa4, 0xad, 0x76, 0xdb, 0x75, 0x2c,
	0xd5, 0x23, 0x79, 0x84, 0xf3, 0x62, 0x68, 0x26, 0xfc, 0x96, 0xfa, 0x11, 0x25, 0xba, 0xc8, 0x48,
	0x90, 0xf1, 0x51, 0x28, 0x31, 0xf1, 0x74, 0x5c, 0x5a, 0xb5, 0xa5, 0x49, 0xfe, 0x33, 0xbc, 0x5e,
	0x69, 0x84, 0xf1, 0x01, 0xe8, 0xd6, 0x4c, 0xeb, 0x38, 0xfd, 0x66, 0xc4, 0x1f, 0xce, 0x11, 0x2d,
	0x62, 0x69, 0x6e, 0x52, 0x8f, 0x2b, 0x0d, 0xee, 0x23, 0xc2, 0x4b, 0x23, 0xaf, 0xd6, 0x1f, 0x1a,
	0xdd, 0x55, 0xa8, 0x96, 0x77, 0x4e, 0x7a, 0x06, 0x3a, 0xed, 0x19, 0xe8, 0x5b, 0xcf, 0x40, 0x47,
	0x67, 0x46, 0xe6, 0xf4, 0xcc, 0xc8, 0x7c, 0x39, 0x33, 0x32, 0xaf, 0x1e, 0xd8, 0x8e, 0xdc, 0xef,
	0xd4, 0x4b, 0x96, 0xdf, 0x32, 0xf5, 0x0f, 0xd0, 0x7d, 0x57, 0xd4, 0xc3, 0xe4, 0xd9, 0xec, 0x6e,
	0x98, 0x6f, 0x87, 0xbf, 0x4c, 0xf2, 0xb0, 0x0d, 0x61, 0x7d, 0x52, 0xbd, 0x0d, 0x1b, 0x3f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xa5, 0x77, 0xf0, 0x78, 0x52, 0x09, 0x00, 0x00,
}

func (m *EventSaveProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSaveProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSaveProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x1a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreationDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationDate):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintEvents(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.DTag) > 0 {
		i -= len(m.DTag)
		copy(dAtA[i:], m.DTag)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DTag)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDeleteProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeleteProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeleteProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRequestDTagTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRequestDTagTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRequestDTagTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestReceiver) > 0 {
		i -= len(m.RequestReceiver)
		copy(dAtA[i:], m.RequestReceiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestReceiver)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DTagToTrade) > 0 {
		i -= len(m.DTagToTrade)
		copy(dAtA[i:], m.DTagToTrade)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DTagToTrade)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCancelDTagTransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCancelDTagTransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCancelDTagTransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestReceiver) > 0 {
		i -= len(m.RequestReceiver)
		copy(dAtA[i:], m.RequestReceiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestReceiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAcceptDTagTransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAcceptDTagTransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAcceptDTagTransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestReceiver) > 0 {
		i -= len(m.RequestReceiver)
		copy(dAtA[i:], m.RequestReceiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestReceiver)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewDTag) > 0 {
		i -= len(m.NewDTag)
		copy(dAtA[i:], m.NewDTag)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewDTag)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DTagToTrade) > 0 {
		i -= len(m.DTagToTrade)
		copy(dAtA[i:], m.DTagToTrade)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DTagToTrade)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRefuseDTagTransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRefuseDTagTransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRefuseDTagTransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestReceiver) > 0 {
		i -= len(m.RequestReceiver)
		copy(dAtA[i:], m.RequestReceiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestReceiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventLinkChainAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLinkChainAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLinkChainAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x22
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreationDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationDate):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintEvents(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUnlinkChainAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUnlinkChainAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUnlinkChainAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventLinkApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLinkApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLinkApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x22
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreationDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationDate):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintEvents(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x1a
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Application) > 0 {
		i -= len(m.Application)
		copy(dAtA[i:], m.Application)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Application)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSaveApplicationLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSaveApplicationLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSaveApplicationLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Application) > 0 {
		i -= len(m.Application)
		copy(dAtA[i:], m.Application)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Application)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUnlinkApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUnlinkApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUnlinkApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Application) > 0 {
		i -= len(m.Application)
		copy(dAtA[i:], m.Application)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Application)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSaveProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DTag)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationDate)
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventDeleteProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRequestDTagTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DTagToTrade)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RequestReceiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCancelDTagTransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RequestReceiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventAcceptDTagTransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DTagToTrade)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewDTag)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RequestReceiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRefuseDTagTransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RequestReceiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventLinkChainAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationDate)
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventUnlinkChainAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventLinkApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationDate)
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSaveApplicationLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventUnlinkApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSaveProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSaveProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSaveProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreationDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeleteProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeleteProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeleteProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRequestDTagTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRequestDTagTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRequestDTagTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DTagToTrade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DTagToTrade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCancelDTagTransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCancelDTagTransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCancelDTagTransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAcceptDTagTransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAcceptDTagTransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAcceptDTagTransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DTagToTrade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DTagToTrade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRefuseDTagTransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRefuseDTagTransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRefuseDTagTransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventLinkChainAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLinkChainAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLinkChainAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreationDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUnlinkChainAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUnlinkChainAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUnlinkChainAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventLinkApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLinkApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLinkApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreationDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSaveApplicationLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSaveApplicationLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSaveApplicationLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUnlinkApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUnlinkApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUnlinkApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
